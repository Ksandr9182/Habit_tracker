package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

var zub bool = false
var zub1 bool = false

// ..................................................................................................................... –°–µ—Ä–≤–µ—Ä
func main() {
	go RunTelegramBot()

	r := gin.Default()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
	r.Use(cors.New(cors.Config{
		AllowOrigins: []string{"http://localhost:3000"},
		AllowMethods: []string{"GET", "POST"},
		AllowHeaders: []string{"Origin", "Content-Type", "Accept"},
	}))

	// –ú–∞—Ä—à—Ä—É—Ç—ã API
	r.GET("/trackers", GetTrackers)
	r.POST("/trackers/update", UpdateTracker)
	r.POST("/trackers/month", GetTrackersByMonth)
	r.POST("/trackers/updatetelega", UpdateTrackerTelega)
	r.GET("/ws", handleWebSocket) // –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è WebSocket

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	r.Run(":8080")
}

// ..................................................................................................................... –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
func RunTelegramBot() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
	}

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates := bot.GetUpdatesChan(u)

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–•–æ—Ç—å–±–∞"),
			tgbotapi.NewKeyboardButton("–ö–∞—Ä–Ω–∏—Ç–∏–Ω"),
			tgbotapi.NewKeyboardButton("–ö–æ—Ñ–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–¢—É–∞–ª–µ—Ç"),
			tgbotapi.NewKeyboardButton("–ó—É–±—ã"),
			tgbotapi.NewKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ú—É—á–Ω–æ–µ"),
			tgbotapi.NewKeyboardButton("–ì–æ–ª–æ–≤–∞"),
			tgbotapi.NewKeyboardButton("–ú–∞–∑—å"),
		),
	)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for update := range updates {
		if update.Message == nil { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
			continue
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

		var msg tgbotapi.MessageConfig

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–†–∞–±–æ—Ç–∞:"
		if strings.HasPrefix(update.Message.Text, "–†–∞–±–æ—Ç–∞") {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–†–∞–±–æ—Ç–∞:"
			str := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "–†–∞–±–æ—Ç–∞"))
			if str == "" {
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ '–†–∞–±–æ—Ç–∞'")
			} else {
				if err := sendUpdate(9, str); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
				} else {
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–†–∞–±–æ—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: %s üëç", str))
				}
			}
		} else if strings.HasPrefix(update.Message.Text, "1–†–∞–±–æ—Ç–∞") {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–†–∞–±–æ—Ç–∞:"
			str := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "1–†–∞–±–æ—Ç–∞"))
			if str == "" {
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ '1–†–∞–±–æ—Ç–∞'")
			} else {
				if err := sendUpdate(10, str); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
				} else {
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–†–∞–±–æ—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: %s üëç", str))
				}
			}
		} else {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			switch update.Message.Text {
			case "–•–æ—Ç—å–±–∞":
				err1 := sendUpdate(1, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ö–∞—Ä–Ω–∏—Ç–∏–Ω":
				err1 := sendUpdate(2, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ö–æ—Ñ–µ":
				err1 := sendUpdate(3, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–¢—É–∞–ª–µ—Ç":
				err1 := sendUpdate(30, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ó—É–±—ã":
				err1 := sendUpdate(6, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–í–∏—Ç–∞–º–∏–Ω—ã":
				err1 := sendUpdate(24, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ú—É—á–Ω–æ–µ":
				err1 := sendUpdate(27, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ì–æ–ª–æ–≤–∞":
				err1 := sendUpdate(23, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			case "–ú–∞–∑—å":
				err1 := sendUpdate(29, "")
				if err1 != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–µ—Ä–∞.")
					return
				}
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "ok!")
			default:
				// –ü—Ä–∏ –ª—é–±–æ–º –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
			}
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		msg.ReplyMarkup = keyboard

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}

// ..................................................................................................................... –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
func sendUpdate(id int, str string) error {
	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
	type Request struct {
		Day   int    `json:"day"`   // –î–µ–Ω—å –≥–æ–¥–∞ (1‚Äì365)
		Index int    `json:"index"` // –ò–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
		State int    `json:"state"` // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		Text  string `json:"text"`  // –¢–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
		Month int    `json:"month"` // –ú–µ—Å—è—Ü (0‚Äì11), –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
	day := time.Now().Day()
	month := int(time.Now().Month()) - 1

	if id == 3 && zub == false && zub1 == false {
		zub = true
		goto xxx
	}
	if id == 3 && zub == true && zub1 == false {
		id = 4
		zub1 = true
		goto xxx
	}
	if id == 3 && zub == true && zub1 == true {
		id = 5
		goto xxx
	}

xxx:
	// –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	reqData := Request{
		Day:   day, // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (—á–∏—Å–ª–æ)
		Index: id,  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		State: 1,   // –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è State, –ø–æ—Å—Ç–∞–≤–∏–ª 0 –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
		Text:  str, // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
		Month: month,
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
	jsonData, err := json.Marshal(reqData)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å
	resp, err := http.Post("http://localhost:8080/trackers/updatetelega", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", resp.Status)
	}

	return nil
}
